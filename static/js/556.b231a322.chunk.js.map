{"version":3,"file":"static/js/556.b231a322.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js","../node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js","../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<{ message: Uint8Array; display: string }, Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\ndeclare global {\n  interface Window {\n    solana: IPhantomWalletProvider & { isPhantom: boolean };\n  }\n}\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!window.solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n  const isAvailable = await poll(() => window.solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  IProvider,\n  log,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport type PhantomAdapterOptions = BaseAdapterSettings;\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): IProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.phantomProvider) {\n      return this.phantomProvider;\n    }\n    return null;\n  }\n\n  set provider(_: IProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<IProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<IProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    this.phantomProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.phantomProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<IProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["BaseSolanaAdapter","BaseAdapter","async","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","SOLANA","provider","status","ADAPTER_STATUS","CONNECTED","WalletLoginError","notConnectedError","chainNamespace","chainId","accounts","request","method","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","encodedMessage","TextEncoder","encode","signedMessage","params","message","display","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","super","checkDisconnectionRequirements","clearToken","rehydrated","emit","ADAPTER_EVENTS","DISCONNECTED","module","exports","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","Error","it4","vch","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","basex","require","poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","_window$solana","options","arguments","undefined","solana","isPhantom","_window$solana2","PhantomAdapter","constructor","_defineProperty","WALLET_ADAPTERS","PHANTOM","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","NOT_READY","_wallet","off","_onDisconnect","READY","isWalletConnected","_this$_wallet","isConnected","phantomProvider","init","checkInitializationRequirements","WalletInitializationError","notInstalled","PhantomInjectedProvider","config","debug","autoConnect","connect","error","_this","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","handleDisconnect","_handleDisconnect","once","windowClosed","_len","args","_key","apply","reason","Web3AuthError","connectionError","publicKey","on","ERRORED","cleanup","disconnectSession","_this$_wallet2","disconnect","disconnectionError","_this$phantomProvider","checkAddChainRequirements","addChain","addChainConfig","_this$phantomProvider2","checkSwitchChainRequirements","switchChain","setAdapterSettings","injectedProvider","setupProvider","reconnected"],"sourceRoot":""}