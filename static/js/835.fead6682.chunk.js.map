{"version":3,"file":"static/js/835.fead6682.chunk.js","mappings":"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AS9mB,GAASX,GAAMonB,KACxBvD,UAAWrjB,GAASC,MACpBghB,YAAajhB,GAASC,UAQUyf,GACpC1f,GACEhC,GAAK,CACH2V,UAAWpT,KACXwmB,kBAAmBxmB,KACnBymB,WAAY/mB,KACZud,aAAche,GACZxB,GAAK,CACHwQ,YAAa8W,GACb7c,KAAMzI,GAASgmB,IACfpT,QAASzS,GAASwmB,OAGtBM,QAAS9mB,GAASX,GAAMonB,KACxBvD,UAAWrjB,GAASC,MACpBghB,YAAajhB,GAASC,UAQIyf,GAC9B1f,GACEhC,GAAK,CACH2V,UAAWpT,KACXwmB,kBAAmBxmB,KACnBymB,WAAY/mB,KACZud,aAAche,GACZxB,GAAK,CACHwQ,YAAakX,GACbjd,KAAMzI,GAAS0mB,IACf9T,QAASzS,GAASwmB,OAGtBM,QAAS9mB,GAASX,GAAMonB,KACxBvD,UAAWrjB,GAASC,MACpBghB,YAAajhB,GAASC,UAQgByf,GAC1C1f,GACEhC,GAAK,CACH2V,UAAWpT,KACXwmB,kBAAmBxmB,KACnBymB,WAAY/mB,KACZud,aAAche,GACZxB,GAAK,CACHwQ,YAAa8W,GACb7c,KAAMzI,GAAS0mB,IACf9T,QAASzS,GAASwmB,OAGtBM,QAAS9mB,GAASX,GAAMonB,KACxBvD,UAAWrjB,GAASC,MACpBghB,YAAajhB,GAASC,UAQYyf,GACtC1f,GACEhC,GAAK,CACH2V,UAAWpT,KACXwmB,kBAAmBxmB,KACnBymB,WAAY/mB,KACZgnB,QAAS9mB,GAASX,GAAMonB,KACxBvD,UAAWrjB,GAASC,MACpBghB,YAAajhB,GAASC,UAUOyf,GACjC1f,GACEhC,GAAK,CACH2V,UAAWpT,KACXwmB,kBAAmBxmB,KACnBymB,WAAY/mB,KACZud,aAAche,GACZxB,GAAK,CACHwQ,YAAa2W,GACb1c,KAAMzI,GAASgmB,OAGnBiB,QAAS9mB,GAASX,GAAMonB,KACxBvD,UAAWrjB,GAASC,UAQUyf,GAClC1f,GACEhC,GAAK,CACH2V,UAAWpT,KACXwmB,kBAAmBxmB,KACnBymB,WAAY/mB,KACZiT,WAAY1T,G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","sources":["../../src/Layout.ts","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@noble/curves/src/abstract/montgomery.ts","../node_modules/@noble/curves/src/ed25519.ts","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@toruslabs/tweetnacl-js/nacl-fast.js","../node_modules/@toruslabs/openlogin-ed25519/src/utils.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js","../node_modules/@web3auth/solana-provider/node_modules/bs58/index.js","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport { bytesToNumberLE, ensureBytes, numberToBytesLE, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  nByteLength: number;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  a: bigint;\n  montgomeryBits: number;\n  powPminus2?: (x: bigint) => bigint;\n  xyToU?: (x: bigint, y: bigint) => bigint;\n  Gu: bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  validateObject(\n    curve,\n    {\n      a: 'bigint',\n    },\n    {\n      montgomeryBits: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      powPminus2: 'function',\n      Gu: 'bigint',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...curve } as const);\n}\n\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P } = CURVE;\n  const modP = (n: bigint) => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const powPminus2 = CURVE.powPminus2 || ((x: bigint) => pow(x, P - BigInt(2), P));\n\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): [bigint, bigint] {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n\n  // Accepts 0 as well\n  function assertFieldElement(n: bigint): bigint {\n    if (typeof n === 'bigint' && _0n <= n && n < P) return n;\n    throw new Error('Expected valid scalar 0 < scalar < CURVE.P');\n  }\n\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(pointU: bigint, scalar: bigint): bigint {\n    const u = assertFieldElement(pointU);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = assertFieldElement(scalar);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw: [bigint, bigint];\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n\n  function encodeUCoordinate(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n\n  function decodeUCoordinate(uEnc: Hex): bigint {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    // This is very ugly way, but it works because fieldLen-1 is outside of bounds for X448, so this becomes NOOP\n    // fieldLen - scalaryBytes = 1 for X448 and = 0 for X25519\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    // u[fieldLen-1] crashes QuickJS (TypeError: out-of-bound numeric index)\n    if (fieldLen === montgomeryBytes) u[fieldLen - 1] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n: Hex): bigint {\n    const bytes = ensureBytes('scalar', n);\n    if (bytes.length !== montgomeryBytes && bytes.length !== fieldLen)\n      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${bytes.length}`);\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => CURVE.randomBytes!(CURVE.nByteLength) },\n    GuBytes: GuBytes,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n} as const;\n\nexport const ed25519 = twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = twistedEdwards({ ...ed25519Defaults, domain: ed25519_domain });\nexport const ed25519ph = twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/14/\n// Appendix B.  Hashing to ristretto255\nexport const hash_to_ristretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = Math.floor((x[j] + 128) / 256);\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  return n;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES,\n\n  gf: gf,\n  D: D,\n  L: L,\n  pack: pack,\n  pack25519: pack25519,\n  unpack25519: unpack25519,\n  M: M,\n  A: A,\n  S: S,\n  Z: Z,\n  pow2523: pow2523,\n  add: add,\n  set25519: set25519,\n  modL: modL,\n  scalarmult: scalarmult,\n  scalarbase: scalarbase\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return null;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (typeof require !== 'undefined') {\n    // Node.js.\n    crypto = require('crypto');\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n","import nacl from \"@toruslabs/tweetnacl-js\";\n\nexport type SECP256K1KeyType = \"secp256k1\";\nexport type ED25519KeyType = \"ed25519\";\n\nexport type SECP256K1Key = Buffer;\nexport type ED25519Key = Buffer;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst l = (nacl as any).lowlevel;\n\nexport function getED25519Key(privateKey: string | Buffer): {\n  sk: Buffer;\n  pk: Buffer;\n} {\n  let privKey: Buffer;\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  }\n  // Implementation copied from tweetnacl\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n\n  d[0] &= 248;\n\n  d[31] &= 127;\n\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return { sk: Buffer.from(sk), pk: Buffer.from(pk) };\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  Block,\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, string> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(\n  providerConfig: Omit<CustomChainConfig, \"chainNamespace\">\n): JRPCMiddleware<unknown, Omit<CustomChainConfig, \"chainNamespace\">> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([\n    createChainIdMiddleware(chainId) as JRPCMiddleware<unknown, unknown>,\n    createProviderConfigMiddleware(providerConfig) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<string[], Block>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware as JRPCMiddleware<unknown, unknown>]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(targetMethod: string, handler: (req: JRPCRequest<T>) => Promise<U>): JRPCMiddleware<T, U> {\n  return createAsyncMiddleware<T, U>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n","import { JRPCEngine, JRPCMiddleware, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    throw WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { rpcErrors } from \"@metamask/rpc-errors\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: string }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display as \"utf8\" | \"hex\");\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request(req);\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { providerErrors } from \"@metamask/rpc-errors\";\nimport { JRPCEngine, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    // overrides the base provider implementation\n    await this.provider.request({\n      method: \"switchSolanaChain\",\n      params: [{ chainId: params.chainId }],\n    });\n  }\n\n  public async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    super.addChain(chainConfig);\n    await this.provider.request({\n      method: \"addNewChainConfig\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw providerErrors.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<never, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.emit(\"connect\", { chainId: this.state.chainId });\n    this.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { rpcErrors } from \"@metamask/rpc-errors\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<unknown, string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<unknown, string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { getED25519Key } from \"@toruslabs/openlogin-ed25519\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw providerErrors.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<never, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public getEd25519Key(privateKey: string): string {\n    return getED25519Key(privateKey).sk.toString(\"hex\").padStart(128, \"0\");\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<never, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<never, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<never, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<[], string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.emit(\"chainChanged\", this.state.chainId);\n      this.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw rpcErrors.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw rpcErrors.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<[string, { encoding: string; preflightCommitment: string }], string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\", preflightCommitment: \"confirmed\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","arguments","undefined","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","toPropertyKey","key","protoProps","staticProps","_0n","BigInt","_1n","_2n","_8n","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","curve","opts","validateBasic","ut","hash","a","d","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","freeze","validateOpts","Fp","n","CURVE_ORDER","prehash","cHash","nByteLength","h","cofactor","MASK","modP","u","isValid","sqrt","inv","bytes","data","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","x","this","toAffine","y","static","p","points","toInv","invertBatch","map","fromAffine","_setWindowSize","windowSize","_WINDOW_SIZE","delete","assertValidity","is0","X","Y","Z","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","ZERO","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","wNAF","wnaf","wNAFCached","normalizeZ","multiply","scalar","f","multiplyUnsafe","I","unsafeLadder","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","hex","len","BYTES","normed","ensureBytes","lastByte","ORDER","y2","isXOdd","isLastByteOdd","privKey","getExtendedPublicKey","point","toRawBytes","toHex","BASE","Gx","Gy","modN","mod","modN_LE","hashed","head","prefix","pointBytes","hashDomainToScalar","context","_len","msgs","_key","msg","verifyOpts","utils","randomPrivateKey","precompute","getPublicKey","sign","options","r","R","s","res","verify","sig","publicKey","SB","fromHex","error","k","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","_5n","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","P","b2","b4","pow2","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","vx2","root1","root2","useRoot1","useRoot2","noRoot","isNegativeLE","Field","ed25519Defaults","sha512","ed25519","ed25519_domain","concatBytes","utf8ToBytes","ELL2_C1","neg","ONE","FpSqrtEven","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","done","Promise","then","fn","self","args","apply","err","_setPrototypeOf","o","setPrototypeOf","__proto__","subClass","superClass","ReferenceError","getPrototypeOf","_arrayLikeToArray","arr","arr2","_unsupportedIterableToArray","minLen","test","l","t","Symbol","iterator","next","iter","StructError","failure","failures","cached","message","rest","path","super","join","_cached","isObject","print","JSON","stringify","toFailure","result","struct","branch","type","refinement","toFailures","run","coerce","mask","coercer","schema","valid","validator","entries","ts","set","Set","refiner","Struct","assert","validate","is","tuples","tuple","input","shiftIterator","define","array","Element","boolean","Class","literal","constant","description","never","nullable","number","isNaN","optional","record","Key","Value","string","Elements","Never","keys","Structs","S","first","unknown","condition","_construct","Parent","Reflect","construct","sham","Proxy","valueOf","Function","_cache","indexOf","has","get","Wrapper","generateKeypair","privateScalar","secretKey","isOnCurve","_unused","toBuffer","isBuffer","byteLength","properties","_classCallCheck","_createClass","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","_Struct","_inherits","_super","_createSuper$3","_this","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBytes","toBase58","buf","toArrayLike","zeroPad","alloc","concat","_createWithSeed","_asyncToGenerator","_regeneratorRuntime","_callee","fromPublicKey","seed","programId","publicKeyBytes","_context","prev","sha256","abrupt","stop","_x","_x2","_x3","seeds","forEach","_createProgramAddress","_callee2","_context2","createProgramAddressSync","_x4","_x5","address","nonce","seedsWithNonce","_findProgramAddress","_callee3","_context3","findProgramAddressSync","_x6","_x7","pubkeyData","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","_Error","_createSuper$2","signature","_wrapNativeSuper","TransactionExpiredTimeoutError","_Error2","_super2","timeoutSeconds","_this2","toFixed","TransactionExpiredNonceInvalidError","_Error3","_super3","_this3","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","_step","_iterator","_createForOfIteratorHelper$5","keySegment","flat","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","str","chars","getAlloc","getItemAlloc","item","field","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","mapEntries","_toConsumableArray","writableSigners","filter","_ref","_slicedToArray","isSigner","isWritable","readonlySigners","_ref3","writableNonSigners","_ref5","readonlyNonSigners","_ref7","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","_ref9","_ref11","_ref13","_ref15","lookupTable","_this$drainKeysFoundI2","drainKeysFoundInLookupTable","state","addresses","keyMeta","isInvoked","writableIndexes","drainedWritableKeys","_this$drainKeysFoundI4","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","_createForOfIteratorHelper$4","_loop","_step$value","lookupTableIndex","findIndex","entry","getOrInsertDefault","payerKeyMeta","_step2","_iterator2","ix","_step3","_iterator3","accountMeta","_keyMeta","Message","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","numSignedAccounts","_","isProgramId","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","_compiledKeys$getMess2","compile","payerKey","getMessageComponents","compileInstructions","byteArray","accountCount","_i","_accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","_createForOfIteratorHelper$3","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","_step4","_iterator4","_index","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","_step5","serializedLength","_iterator5","encodedAccountKeyIndexesLength","encodedDataLength","_step6","_iterator6","encodedWritableIndexesLength","encodedReadonlyIndexesLength","_step7","compiledKeys","_iterator7","extractResult","extractTableLookup","_accountKeysFromLooku","_accountKeysFromLooku2","_extractResult","addressTableLookup","_extractResult$","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","_i2","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","version","DEFAULT_SIGNATURE","fill","TransactionInstruction","toJSON","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","_ref2","minContextSlot","blockhash","_ref4","_nonceInfo","nonceInstruction","signers","items","console","warn","programIds","accountMetas","_objectSpread$2","includes","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","_createForOfIteratorHelper$2","signedKeys","unsignedKeys","_ref6","compileMessage","every","pair","_compile","_getEstimatedFee","connection","getFeeForMessage","sent","_len2","_key2","seen","_len3","_key3","uniqueSigners","_signers","signer","_partialSign","_len4","_key4","_signers2","_len5","_key5","_addSignature","sigpair","requireAllSignatures","_verifySignatures","serializeMessage","_step2$value","config","_Object$assign","verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","isAccountSigner","isAccountWritable","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","messageData","signerPubkeys","_createForOfIteratorHelper","signerIndex","signaturesLength","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","_sendAndConfirmTransaction","sendOptions","status","nonceAccountPubkey","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","u64","blob","_encodeDecode","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","_load","program","balanceNeeded","programInfo","dataLayout","transactions","_data","_transaction","_dataLayout","_data2","_transaction2","deployCommitment","finalizeSignature","_yield$connection$con","getMinimumBalanceForRentExemption","getAccountInfo","executable","allocate","owner","transfer","bytesLength","bytesLengthPadding","_rpcEndpoint","all","getSlot","slot","t0","round","MS_PER_SLOT","globalThis","fetch","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","code","UnknownRpcResult","jsonRpcResult","_objectSpread","jsonRpcResultAndContext","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetRecentPrioritizationFeesResult","epoch","effectiveSlot","amount","postBalance","commission","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","logs","rentEpoch","unitsConsumed","returnData","byIdentity","range","firstSlot","lastSlot","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","root","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","LogsResult","previousBlockhash","parentSlot","rewards","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","Keypair","_process$env$npm_pack","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","_PublicKey$findProgra2","authority","recentSlot","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","secp256k1","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","_params$instructionIn","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","_ecdsaSign","msgHash","toCompactRawBytes","recovery","ecdsaSign","_ecdsaSign2","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","VoteProgram","Voter","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","nacl","gf","init","Float64Array","randombytes","_0","_9","gf0","gf1","_121665","D2","ts64","vn","xi","yi","crypto_verify_16","crypto_verify_32","crypto_core_salsa20","out","inp","c","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","core_salsa20","crypto_core_hsalsa20","core_hsalsa20","sigma","crypto_stream_salsa20_xor","cpos","m","mpos","crypto_stream_salsa20","crypto_stream","sn","crypto_stream_xor","poly1305","t1","t2","t3","t4","t5","t6","t7","Uint16Array","pad","leftover","fin","crypto_onetimeauth","outpos","update","finish","crypto_onetimeauth_verify","hpos","crypto_secretbox","crypto_secretbox_open","set25519","car25519","sel25519","q","pack25519","j","neq25519","par25519","unpack25519","M","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b1","b3","b6","b7","b8","b9","b11","b12","b13","b14","b15","inv25519","pow2523","crypto_scalarmult","x32","subarray","x16","crypto_scalarmult_base","crypto_box_keypair","crypto_box_beforenm","blocks","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","hibit","h0","h1","h2","h3","h4","h5","h6","h7","h8","h9","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","mac","macpos","g","want","crypto_box_afternm","crypto_box_open_afternm","K","crypto_hashblocks_hl","hh","hl","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","th","tl","wh","Int32Array","wl","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","al0","al1","al2","al3","al4","al5","al6","al7","pos","crypto_hash","cswap","pack","tx","ty","zi","scalarmult","scalarbase","crypto_sign_keypair","pk","sk","seeded","L","modL","carry","crypto_sign","sm","smlen","crypto_sign_open","chk","num","den","den2","den4","den6","unpackneg","crypto_secretbox_BOXZEROBYTES","crypto_sign_BYTES","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","checkLengths","checkArrayTypes","cleanup","lowlevel","crypto_box","crypto_box_open","crypto_secretbox_KEYBYTES","crypto_secretbox_NONCEBYTES","crypto_secretbox_ZEROBYTES","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SECRETKEYBYTES","crypto_box_BEFORENMBYTES","crypto_box_NONCEBYTES","crypto_box_ZEROBYTES","crypto_box_BOXZEROBYTES","crypto_sign_SEEDBYTES","crypto_hash_BYTES","secretbox","open","box","keyLength","nonceLength","overheadLength","scalarMult","scalarLength","groupElementLength","before","checkBoxLengths","after","keyPair","publicKeyLength","secretKeyLength","sharedKeyLength","signedMsg","tmp","mlen","detached","fromSeed","seedLength","signatureLength","hashLength","setPRNG","crypto","msCrypto","getRandomValues","min","module","createChainIdMiddleware","chainId","req","end","method","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","async","request","response","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","BaseProvider","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","WalletLoginError","unsupportedOperation","injectedProvider","engine","JRPCEngine","solanaMiddleware","getProviderHandlers","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","getBaseProviderHandlers","rpcErrors","methodNotSupported","display","_req$params","_req$params2","invalidParams","createInjectedProviderProxyMiddleware","PhantomInjectedProvider","TorusInjectedProvider","addChain","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","handleInjectedProviderUpdate","setupEngine","providerErrors","custom","connectedChainId","connectedHexChainId","isHexStrict","parseInt","WalletInitializationError","rpcConnectionError","emit","txMessage","_req$params3","_req$params4","_req$params5","getTorusHandlers","on","configure","setupProvider","SolanaPrivateKeyProvider","_providerEngineProxy","getEd25519Key","getED25519Key","padStart","getProviderEngineProxy","partialSign","encoding","_req$params6","txns","networkMiddleware","fetchMiddleware","createFetchMiddleware","createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","addNewChainConfig","switchSolanaChain","createChainSwitchMiddleware","switchChain","updatePrivatekey","createAccountMiddleware","updateAccount","_class","_defineProperty","providerFactory","ALPHABET","BASE_MAP","charAt","xc","charCodeAt","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","psz","zeroes","b256","it3","it4","vch","ArrayBuffer","isView","pbegin","pend","b58","it1","it2","repeat","basex","_Buffer","allocUnsafe","reversed","reverse","width","__createBinding","k2","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","default","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","val","serializeStruct","obj","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a1","a2","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","callback","isBatch","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","NewTarget","__rest","propertyIsEnumerable","WebSocketBrowserImpl","_EventEmitter","protocols","socket","window","WebSocket","onopen","onmessage","onerror","onclose","reason","optionsOrCallback","cb","send","close","addEventListener","rnds8","rng","REGEX","byteToHex","toLowerCase","rnds","random","_getPrototypeOf","_typeof","assertThisInitialized","hint","prim","toPrimitive","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","finished","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}