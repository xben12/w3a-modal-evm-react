{"version":3,"file":"static/js/142.b5a75de6.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js","../node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js","../node_modules/@toruslabs/solana-embed/src/isStream.ts","../node_modules/@toruslabs/solana-embed/src/messages.ts","../node_modules/@toruslabs/solana-embed/src/interfaces.ts","../node_modules/@toruslabs/solana-embed/src/config.ts","../node_modules/@toruslabs/solana-embed/src/loglevel.ts","../node_modules/@toruslabs/solana-embed/src/utils.ts","../node_modules/@toruslabs/solana-embed/src/baseProvider.ts","../node_modules/@toruslabs/solana-embed/src/embedUtils.ts","../node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","../node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","../node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","../node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","../node_modules/@toruslabs/solana-embed/src/embed.ts","../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts","../../src/classes.ts","../../src/error-constants.ts","../../src/errors.ts","../../src/index.ts","../../src/utils.ts"],"sourcesContent":["import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<{ message: Uint8Array; display: string }, Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nexport function isStream(stream: any) {\n  return stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\n}\n\nexport function isWritableStream(stream: any) {\n  return isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\n}\n\nexport function isReadableStream(stream: any) {\n  return isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\n}\n\nexport function isDuplexStream(stream: any) {\n  return isWritableStream(stream) && isReadableStream(stream);\n}\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type TransactionOrVersionedTransaction = Transaction | VersionedTransaction;\n\nexport type PAYMENT_PROVIDER_TYPE = (typeof PAYMENT_PROVIDER)[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = (typeof TORUS_BUILD_ENV)[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = (typeof BUTTON_POSITION)[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = (typeof LOGIN_PROVIDER)[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface ThemeParams {\n  /**\n   * If true, enables dark mode\n   * Defaults to false\n   * @defaultValue false\n   */\n  isDark: boolean;\n  /**\n   * Colors object to customize colors in torus theme.\n   *\n   * Contact us for whitelabel. Example provided in `examples/vue-app`\n   */\n  colors: Record<string, string>;\n}\n\nexport interface WhiteLabelParams {\n  /**\n   * App name to display in the UI\n   */\n  name?: string;\n  /**\n   * App url\n   */\n  url?: string;\n  /**\n   * Whitelabel theme\n   */\n  theme: ThemeParams;\n  /**\n   * Language of whitelabel.\n   *\n   * order of preference: Whitelabel language \\> user language (in torus-website) \\> browser language\n   */\n  defaultLanguage?: string;\n  /**\n   * Logo Url to be used in light mode (dark logo)\n   */\n  logoDark: string;\n  /**\n   * Logo Url to be used in dark mode (light logo)\n   */\n  logoLight: string;\n  /**\n   * Shows/hides topup option in torus-website/widget.\n   * Defaults to false\n   * @defaultValue false\n   */\n  topupHide?: boolean;\n  /**\n   * Custom translations. See (examples/vue-app) to configure\n   */\n  customTranslations?: LocaleLinks<unknown>;\n}\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n  /**\n   * Params to enable whitelabelling of torus website and widget\n   */\n  whiteLabel?: WhiteLabelParams;\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: `torus-`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const e = error as { code?: number; name?: string };\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/97c87069b81ef4ec0765a267525c82153e5404fc/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  SafeEventEmitterProvider,\n  SendCallBack,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport { isDuplexStream } from \"./isStream\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void);\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback as (...args: unknown[]) => void);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void);\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","import { VersionedTransaction } from \"@solana/web3.js\";\n\nimport { TransactionOrVersionedTransaction } from \"./interfaces\";\n\nexport const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n\nexport function isLegacyTransactionInstance(transaction: TransactionOrVersionedTransaction): boolean {\n  return (transaction as VersionedTransaction).version === undefined;\n}\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  timeout: number;\n\n  constructor({ url, target, features, timeout = 30000 }: { url: URL; target?: string; features?: string; timeout?: number }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this.timeout = timeout;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          setTimeout(() => {\n            if (!this.iClosedWindow) {\n              this.emit(\"close\");\n            }\n            this.iClosedWindow = false;\n            this.window = undefined;\n          }, this.timeout);\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LocaleLinks,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage() as keyof LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = ((err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        }) as (...args: unknown[]) => void;\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SendOptions, SignaturePubkeyPair, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport { version } from \"../package.json\";\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { htmlToElement, isLegacyTransactionInstance } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  TransactionOrVersionedTransaction,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  isTopupHidden = false;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n    whiteLabel,\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    return new Promise<void>((resolve, reject) => {\n      try {\n        this.torusIframe.addEventListener(\"load\", async () => {\n          const dappMetadata = await getSiteMetadata();\n          // send init params here\n          this.torusIframe.contentWindow.postMessage(\n            {\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams,\n              whiteLabel,\n            },\n            torusIframeUrl.origin\n          );\n          await this._setupWeb3({\n            torusUrl,\n          });\n          if (showTorusButton) this.showTorusButton();\n          if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n          else this.hideTorusButton();\n          this.isInitialized = true;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (window as any).torus = this;\n          resolve();\n        });\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: TransactionOrVersionedTransaction): Promise<string> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serialize({ requireAllSignatures: false }).toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).serialize()).toString(\"hex\");\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message, isLegacyTransaction },\n    })) as string;\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction: TransactionOrVersionedTransaction, options?: SendOptions): Promise<{ signature: string }> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serialize({ requireAllSignatures: false }).toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).serialize()).toString(\"hex\");\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message, options, isLegacyTransaction },\n    })) as string;\n    return { signature: response };\n  }\n\n  async signTransaction(transaction: TransactionOrVersionedTransaction): Promise<TransactionOrVersionedTransaction> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serializeMessage().toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).message.serialize()).toString(\"hex\");\n\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message, messageOnly: true, isLegacyTransaction },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: TransactionOrVersionedTransaction[]): Promise<TransactionOrVersionedTransaction[]> {\n    let isLegacyTransaction;\n    const encodedMessage = transactions.map((tx) => {\n      isLegacyTransaction = isLegacyTransactionInstance(tx);\n      return isLegacyTransaction\n        ? (tx as Transaction).serializeMessage().toString(\"hex\")\n        : Buffer.from((tx as VersionedTransaction).message.serialize()).toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true, isLegacyTransaction },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = ((payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    }) as (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (\n      m: keyof Omit<TorusInPageProvider, \"isTorus\" | \"selectedAddress\" | \"chainId\" | \"SafeEventEmitter\" | \"jsonRpcConnectionEvents\" | \"_rpcEngine\">\n    ) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request: JRPCRequest<string[]>, cb: (...args: unknown[]) => void) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] as LOGIN_PROVIDER_TYPE });\n          self\n            .login({ loginProvider: params[0] as LOGIN_PROVIDER_TYPE })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return originalMethod.apply(this, [request, cb]);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } as any;\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  IProvider,\n  log,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): IProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.solanaProvider) {\n      return this.solanaProvider;\n    }\n    return null;\n  }\n\n  set provider(_: IProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<IProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    // await this.solanaProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    const chainConfig = this.getChainConfig(params.chainId) as CustomChainConfig;\n    await this.torusInstance?.setProvider({\n      rpcTarget: chainConfig.rpcTarget,\n      chainId: chainConfig.chainId,\n      displayName: chainConfig.displayName,\n      blockExplorerUrl: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n      logo: \"https://images.web3auth.io/login-torus-solana.svg\",\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n"],"names":["BaseSolanaAdapter","BaseAdapter","async","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","SOLANA","provider","status","ADAPTER_STATUS","CONNECTED","WalletLoginError","notConnectedError","chainNamespace","chainId","accounts","request","method","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","encodedMessage","TextEncoder","encode","signedMessage","params","message","display","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","super","checkDisconnectionRequirements","clearToken","rehydrated","emit","ADAPTER_EVENTS","DISCONNECTED","module","exports","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","Error","it4","vch","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","basex","require","isStream","stream","pipe","isDuplexStream","writable","_write","_writableState","isWritableStream","readable","_read","_readableState","isReadableStream","messages","disconnected","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","configuration","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKeyPrefix","loglevel","getWindowId","getTorusUrl","torusUrl","logLevel","buildEnv","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","_ref","w","h","dualScreenLeft","undefined","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","abs","BaseProvider","SafeEventEmitter","constructor","connectionStream","jsonRpcStreamName","_defineProperty","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","req","res","next","error","ethErrors","rpc","invalidRequest","data","done","createLoggerMiddleware","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Promise","resolve","reject","getRpcPromiseCallback","send","callback","streamName","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","logStreamDisconnectWarning","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","isLegacyTransactionInstance","transaction","PopupHandler","url","target","features","timeout","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","setTimeout","open","_this$window","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_objectSpread","_defaultState","dappStorageKey","languageTranslations","getUserLanguage","userLanguage","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","embedTranslations","windowRefs","on","isConnected","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","currentLoginProvider","isLoggedIn","USER_LOGGED_OUT","isIFrameFullScreen","torusAlertContainer","torusIframe","addEventListener","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","info","initialized","_handleWindow","arguments","finalUrl","URL","hash","handledWindow","OPENED_WINDOW","once","CLOSED_WINDOW","style","top","right","bottom","torusWidgetVisibility","buttonPosition","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","attachOnLoad","bindOnLoad","remove","children","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","isUnlocked","PROVIDER_JRPC_METHODS","isInternal","err","result","handle","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","e","getSiteName","siteName","querySelector","metaTitle","title","hostname","getSiteIcon","icon","querySelectorAll","find","_icon","Boolean","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","type","storage","setItem","removeItem","code","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","enableLogging","network","useLocalStorage","apiKey","extraParams","whiteLabel","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","dappMetadata","getSiteMetadata","contentWindow","postMessage","_setupWeb3","topupHide","isTopupHidden","torus","body","loginProvider","login_hint","loginParams","privateKey","userInfo","success","LOGOUT","logout","clearInit","isElement","element","Element","Document","contains","path","instanceId","WALLET_INSTANCE_ID","finalPath","searchParams","keys","forEach","USER_INFO","TOPUP","isLegacyTransaction","serialize","requireAllSignatures","Buffer","options","signature","serializeMessage","response","messageOnly","parsed","JSON","parse","publicKey","PublicKey","addSignature","transactions","map","tx","signatures","item","idx","localStorageKey","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","login","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all","SolanaWalletAdapter","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","solanaProvider","init","checkInitializationRequirements","blockExplorer","displayName","rpcTarget","ticker","tickerName","blockExplorerUrl","logo","torusInstance","TorusInjectedProvider","config","READY","autoConnect","connect","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","torusInpageProvider","sendTransaction","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","setProvider","reconnected","connectionError","cleanup","disconnectSession","disconnect","getUserInfo","checkAddChainRequirements","addChainConfig","_this$torusInstance","checkSwitchChainRequirements","setAdapterSettings","fast_safe_stringify_1","isInteger","serialized","default","stringifyReplacer","value","isValidEthProviderCode","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","methodNotFound","invalidParams","internal","userRejectedRequest","unauthorized","unsupportedMethod","chainDisconnected","standard","classes_1","utils_1","error_constants_1","getEthJsonRpcError","arg","parseOpts","getMessageFromCode","getEthProviderError","EthereumProviderError","errorCodes","server","opts","custom","enumerable","get","errors_1","FALLBACK_ERROR_CODE","FALLBACK_MESSAGE","FALLBACK_ERROR","fallbackMessage","codeString","hasKey","errorValues","isJsonRpcServerError","JSON_RPC_SERVER_ERROR_MESSAGE","isValidCode","assignOriginalError","obj","key","fallbackError","shouldIncludeStack","_error","originalError","_a","_b"],"sourceRoot":""}